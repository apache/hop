#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

RegexEval.Description=Regular expression Evaluation\nThis transform uses a regular expression to evaluate a field. It can also extract new fields out of an existing field with capturing groups.
RegexEval.Exception.CouldnotFindField=Couldn''t find field ''{0}'' in row\!
RegexEval.Exception.ErrorCaptureGroupFieldsMismatch=The number of capture groups in the regular expression ({0}) does not match the number of fields specified ({1})\!
RegexEval.Exception.ErrorMatcherMissing=Error missing Field to evaluate
RegexEval.Exception.ErrorResultFieldMissing=Error result Field is missing
RegexEval.Log.ErrorCaptureGroupFieldsMismatch=The number of capture groups in the regular expression ({0}) does not match the number of fields specified ({1})\!
RegexEval.Log.ErrorFindingField=Error finding field\: 
RegexEval.Log.ErrorInTransform=Error in transform
RegexEval.Log.ErrorMatcherMissing=Error missing Field to evaluate
RegexEval.Log.ErrorResultFieldMissing=Error result Field is missing
RegexEval.Log.ReadRow=Reading row \:
RegexEval.Log.Regexp=The regular expression is \:
RegexEval.Name=Regex evaluation
RegexEvalDialog.AllowCaptureGroups.Label=Create fields for capture groups
RegexEvalDialog.AllowCaptureGroups.Tooltip=Allows the creation of new fields based on the capture groups defined in the regex.
RegexEvalDialog.CanonEq.Label=Ignore differences in Unicode encodings
RegexEvalDialog.CanonEq.Tooltip=CANON_EQ to ignore differences in Unicode encodings,\n unless you are sure your strings contain only US ASCII characters and you want to increase performance.
RegexEvalDialog.CaseInsensitive.Label=Enables case-insensitive matching
RegexEvalDialog.CaseInsensitive.Tooltip=CASE_INSENSITIVE to enables case-insensitive.\nBy default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.\n Unicode-aware case-insensitive matching can be enabled by specifying the UNICODE_CASE flag in conjunction with this flag.\nCase-insensitive matching can also be enabled via the embedded flag expression (?i).
RegexEvalDialog.ColumnInfo.Currency=Currency
RegexEvalDialog.ColumnInfo.Decimal=Decimal
RegexEvalDialog.ColumnInfo.Format=Format
RegexEvalDialog.ColumnInfo.Group=Group
RegexEvalDialog.ColumnInfo.IfNull=Default
RegexEvalDialog.ColumnInfo.Length=Length
RegexEvalDialog.ColumnInfo.NewField=New field
RegexEvalDialog.ColumnInfo.Nullif=Null If
RegexEvalDialog.ColumnInfo.Precision=Precision
RegexEvalDialog.ColumnInfo.TrimType=Trim
RegexEvalDialog.ColumnInfo.Type=Type
RegexEvalDialog.Comment.Label=Permit whitespace and comments in pattern
RegexEvalDialog.Comment.Tooltip=In this mode, whitespace is ignored,\n and embedded comments starting with \# are ignored until the end of a line.\nComments mode can also be enabled via the embedded flag expression (?x).
RegexEvalDialog.ContentTab.TabTitle=Content
RegexEvalDialog.DotAll.Label=Enable dotall mode
RegexEvalDialog.DotAll.Tooltip=In dotall mode, the expression . matches any character, including a line terminator.\n By default this expression does not match line terminators.\nDotall mode can also be enabled via the embedded flag expression (?s).
RegexEvalDialog.FailedToGetFields.DialogMessage=Unable to get fields from previous transforms because of an error
RegexEvalDialog.FailedToGetFields.DialogTitle=Unable to get fields
RegexEvalDialog.Fields.Label=Capture Group Fields
RegexEvalDialog.Fields.Tooltip=Fields specified here will be populated (in order) by the capture groups defined in the Regex.
RegexEvalDialog.GeneralTab.TabTitle=Settings
RegexEvalDialog.Group.TransformSettings.Label=transform settings
RegexEvalDialog.Javascript.Label=Regular expression \:
RegexEvalDialog.Matcher.Label=Field to evaluate
RegexEvalDialog.Multiline.Label=Enable multiline mode
RegexEvalDialog.Multiline.Tooltip=In multiline mode the expressions ^ and $ match just after or just before,\n respectively, a line terminator or the end of the input sequence.\n By default these expressions only match at the beginning and the end of the entire input sequence.\nMultiline mode can also be enabled via the embedded flag expression (?m).
RegexEvalDialog.ReplaceFields.Label=Replace previous fields
RegexEvalDialog.ReplaceFields.Tooltip=Replace any conflicting fields from previous transforms
RegexEvalDialog.ResultField.Label=Result field name
RegexEvalDialog.ResultField.Tooltip=Result Field Name to add to output stream
RegexEvalDialog.Script.Label=Regular expression  
RegexEvalDialog.Shell.Title=Regex evaluation
RegexEvalDialog.TestScript.Label=Test regEx
RegexEvalDialog.TransformName.Label=Transform name
RegexEvalDialog.Unicode.Label=Enable Unicode-aware case folding
RegexEvalDialog.Unicode.Tooltip=When this flag is specified then case-insensitive matching,\n when enabled by the CASE_INSENSITIVE flag, is done in a manner consistent with the Unicode Standard.\n By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.\nUnicode-aware case folding can also be enabled via the embedded flag expression (?u).
RegexEvalDialog.Unix.Label=Enables Unix lines mode
RegexEvalDialog.Unix.Tooltip=In this mode, only the '\n' line terminator is recognized in the behavior of ., ^, and $.\nnix lines mode can also be enabled via the embedded flag expression (?d).
RegexEvalDialog.UseVar.Label=Use variable substitution
RegexEvalDialog.UseVar.Tooltip=Use variable substitution
RegexEvalHelperDialog.EnterScript.Message=Regular expression is missing\!
RegexEvalHelperDialog.EnterScript.Title=ERROR
RegexEvalHelperDialog.ErrorCompiling.Message=Error while trying to compile expression\:
RegexEvalHelperDialog.FieldsGroup=Capture group fields ({0})
RegexEvalHelperDialog.GroupFields.Label=Captured fields
RegexEvalHelperDialog.RegExTab.Label=Regular expression
RegexEvalHelperDialog.Script.Label=Please enter a new regular expression or modify.
RegexEvalHelperDialog.ScriptSuccessfullyCompiled=The regular expression was successfully compiled.
RegexEvalHelperDialog.Shell.Label=Regular expression evaluation
RegexEvalHelperDialog.TestValues.Label=Values to test
RegexEvalHelperDialog.Value1.Label=Value1
RegexEvalHelperDialog.Value2.Label=Value2
RegexEvalHelperDialog.Value3.Label=Value3
RegexEvalHelperDialog.ValueGroup.Label=Capture from value
RegexEvalMeta.CheckResult.ConnectedTransformOK=Transform is connected to previous one, receiving {0} fields
RegexEvalMeta.CheckResult.MatcherOK=Field to evaluate is filled
RegexEvalMeta.CheckResult.NoInputReceived=No input received from other transforms\!
RegexEvalMeta.CheckResult.NoMatcher=Field to evaluate is missing\!
RegexEvalMeta.CheckResult.NoResultFieldname=No result field name specified\!
RegexEvalMeta.CheckResult.ResultFieldnameOK=The result field name is specified.
RegexEvalMeta.Exception.UnableToLoadTransformMetaFromXML=Unable to load transform info from XML
RegexEvalMeta.keyword=regex,regular,expression,evaluation
