#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

System.Warning.OnlySpaces=Warning: this value only contains spaces.
System.Warning.TrailingSpaces=Warning: this value has trailing spaces.
Validator.Exception.DataConversionErrorEncountered=A data conversion error was encountered while doing validation
Validator.Exception.DoesNotEndWithString=During validation of field ''{0}'' we found that string value [{1}] is not ending with string [{2}]
Validator.Exception.DoesNotStartWithString=During validation of field ''{0}'' we found that string value [{1}] is not starting with string [{2}]
Validator.Exception.EndsWithString=During validation of field ''{0}'' we found that string value [{1}] is ending with string [{2}]
Validator.Exception.HigherThanMaximumValue=During validation of field ''{0}'' we found that value [{1}] is higher than the specified maximum [{2}]
Validator.Exception.LongerThanMaximumLength=During validation of field ''{0}'' we found that value [{1}] has a longer ({2}) string length than allowed ({3}).
Validator.Exception.LowerThanMinimumValue=During validation of field ''{0}'' we found that value [{1}] is lower than the specified minimum [{2}]
Validator.Exception.MatchingRegExpExpected=During validation of field ''{0}'' we found that value [{1}] is not matching regular expression [{2}]
Validator.Exception.MatchingRegExpNotAllowed=During validation of field ''{0}'' we found that value [{1}] is not matching regular expression [{2}]
Validator.Exception.NonNumericDataNotAllowed=During validation of field ''{0}'' we found that value [{1}] contains non-numeric information \: [{2}]
Validator.Exception.NotInList=During validation of field ''{0}'' we found that value [{1}] is not in the list of allowed values.
Validator.Exception.NullNotAllowed=During validation of field ''{0}'' we found that its value is null in row <{1}> when this is not allowed.
Validator.Exception.NumberFormatException=Caught a number format exception converting minimum length with value {0} to an int
Validator.Exception.OnlyNullAllowed=During validation of field ''{0}'' we found that value [{1}] is not null while only null values are allowed
Validator.Exception.ShorterThanMininumLength=During validation of field ''{0}'' we found that value [{1}] has a shorter ({2}) string length than allowed ({3}).
Validator.Exception.SpecifyDataType=Please specify a data type to convert to\!
Validator.Exception.StartsWithString=During validation of field ''{0}'' we found that string value [{1}] is starts with string [{2}]
Validator.Exception.UnexpectedDataType=During validation of field ''{0}'' we found that its data type [{1}] is different from the expected [{2}].
Validator.Injection.CONCATENATE_ERRORS=This option causes all errors to be combined into a single output row.
Validator.Injection.CONCATENATION_SEPARATOR=Specify the error separator when the errors are in one output row.
Validator.Injection.CONVERSION_MASK=Specify the mask to use to convert the data specified in this validation rule.
Validator.Injection.DATA_TYPE=Specify the data type to verify.
Validator.Injection.DATA_TYPE_VERIFIED=This option causes the specified data type to be verified.
Validator.Injection.DECIMAL_SYMBOL=Specify the decimal symbol to use in this validation rule.
Validator.Injection.END_STRING=Specify which end string value we want to validate.
Validator.Injection.END_STRING_NOT_ALLOWED=Specify which string that is now allowed to end validation from.
Validator.Injection.ERROR_CODE=Specify an error code when a validation exception has occurred.
Validator.Injection.ERROR_CODE_DESCRIPTION=Specify a description of the error when a validation exception has occurred.
Validator.Injection.FIELD_NAME=The name of the field to validate.
Validator.Injection.GROUPING_SYMBOL=Specify the grouping symbol to use in this validation rule.
Validator.Injection.MAX_LENGTH=The maximum allowed string length.
Validator.Injection.MAX_VALUE=The maximum allowed value to validate against.
Validator.Injection.MIN_LENGTH=The minimum allowed string length.
Validator.Injection.MIN_VALUE=The minimum allowed value to validate against.
Validator.Injection.NAME=The name of the validation.
Validator.Injection.NULL_ALLOWED=This option will allow null values in the data for the selected fields.
Validator.Injection.ONLY_NULL_ALLOWED=This option will only allow null values in the data for the selected fields.
Validator.Injection.ONLY_NUMERIC_ALLOWED=This option will only allow numeric data for the selected fields.
Validator.Injection.REGULAR_EXPRESSION_EXPECTED=The string value we want to validate needs to match this regular expression (when specified).
Validator.Injection.REGULAR_EXPRESSION_NOT_ALLOWED=The string value we want to validate is not allowed to match this regular expression (when specified).
Validator.Injection.SOURCING_FIELD=The field to read from the specified transform.
Validator.Injection.SOURCING_TRANSFORM_NAME=The name of the transform to read from.
Validator.Injection.SOURCING_VALUES=This option lets you specify to read values from another transform.
Validator.Injection.START_STRING=Specify which start string value we want to validate.
Validator.Injection.START_STRING_NOT_ALLOWED=Specify which string that is now allowed to start validation from.
Validator.Injection.VALIDATE_ALL=This option will validate all errors, and not just the first one.
Validator.Injection.VALIDATIONS=The list of validations created for the transformation.
ValidatorDialog.AllowedValues.Label=Allowed values
ValidatorDialog.ButtonAddAllowed.Label=\    Add    
ValidatorDialog.ButtonRemoveAllowed.Label=\ Remove 
ValidatorDialog.ClearButton.Label=Remove validation
ValidatorDialog.ConcatErrors.Label=Output one row, concatenate errors with separator \:   
ValidatorDialog.ConversionMask.Label=Conversion mask
ValidatorDialog.DataGroup.Label=Data
ValidatorDialog.DataType.Label=Data type
ValidatorDialog.DataTypeVerified.Label=Verify data type?
ValidatorDialog.DecimalSymbol.Label=Decimal Symbol
ValidatorDialog.Description.Label=Validation description
ValidatorDialog.Dialog.AddAllowedValue.Message=Enter the allowed value to add\: 
ValidatorDialog.Dialog.AddAllowedValue.Title=Add allowed value
ValidatorDialog.EndStringDisallowed.Label=Not allowed end string
ValidatorDialog.EndStringExpected.Label=Expected end string
ValidatorDialog.EnterValidationRuleName.Message=Enter a unique name for the validation rule you want to add
ValidatorDialog.EnterValidationRuleName.Title=Enter validation name
ValidatorDialog.ErrorCode.Label=Error code
ValidatorDialog.ErrorDescription.Label=Error description
ValidatorDialog.Exception.CantGetFieldsFromPreviousTransforms.Message=We couldn''t determine the list of fields coming from the previous transforms.  Please connect this transform to a predecessor.
ValidatorDialog.Exception.CantGetFieldsFromPreviousTransforms.Title=Error
ValidatorDialog.FailedToGetFields.DialogMessage=Unable to get fields from previous transforms because of an error
ValidatorDialog.FailedToGetFields.DialogTitle=Get fields failed
ValidatorDialog.FieldList.Label=Select a validation to edit \:
ValidatorDialog.FieldName.Label=Name of field to validate
ValidatorDialog.GroupingSymbol.Label=Grouping Symbol
ValidatorDialog.MaxLength.Label=Max string length
ValidatorDialog.MaxValue.Label=Maximum value
ValidatorDialog.MinLength.Label=Min string length
ValidatorDialog.MinValue.Label=Minimum value
ValidatorDialog.NewButton.Label=New validation
ValidatorDialog.NullAllowed.Label=Null allowed?
ValidatorDialog.OnlyNullAllowed.Label=Only null values allowed?
ValidatorDialog.OnlyNumeric.Label=Only numeric data expected 
ValidatorDialog.RegExpDisallowed.Label=Regular expression not allowed to match
ValidatorDialog.RegExpExpected.Label=Regular expression expected to match
ValidatorDialog.SourceField.Label=The field to read from
ValidatorDialog.SourceTransform.Label=The transform to read from
ValidatorDialog.SourceValues.Label=Read allowed values from another transform?
ValidatorDialog.StartStringDisallowed.Label=Not allowed start string
ValidatorDialog.StartStringExpected.Label=Expected start string
ValidatorDialog.Transform.Description=Validate input data 
ValidatorDialog.Transform.KeyWords=Data Validator,validation
ValidatorDialog.Transform.Name=Data validator
ValidatorDialog.TransformName.Label=Transform name \: 
ValidatorDialog.TypeGroup.Label=Type
ValidatorDialog.ValidateAll.Label=Report all errors, not only the first
ValidatorDialog.ValidationRuleNameAlreadyExists.Message=A validation rule with that name already exists\!
ValidatorDialog.ValidationRuleNameAlreadyExists.Title=Already exists
ValidatorMeta.CheckResult.ExpectedInputError=This transform expects input but none is received.
ValidatorMeta.CheckResult.ExpectedInputOk=This transform expects and receives input from other transforms.
ValidatorMeta.CheckResult.FieldsReceived=This fields receives {0} fields from the previous transforms.
ValidatorMeta.InfoStream.Description=Optional info stream for reference data of validation \: 
ValidatorMeta.InfoStream.ValidationInput.Description=Optional reference data for validation ''{0}''
ValidatorMeta.NewValidation.Description=Create a new validation using reference data
