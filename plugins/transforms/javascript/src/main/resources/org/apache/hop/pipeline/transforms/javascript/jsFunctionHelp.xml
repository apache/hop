<?xml version="1.0" encoding="UTF-8"?>
<jsFunctions language="us">
  <jsFunction name="isNum">
    <help>Check if the given Value is a valid Numeric.</help>
    <sample>// Returns true, if the given value is a valid number
      //
      // Usage:
      // isNum(var);
      // 1: var - The Variable to check.
      //
      // 2006-11-15
      //
      var str1 = "Hello World";
      var str2 = 123456;
      Alert(isNum(str1));
      Alert(isNum(str2));
    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="str2date">
    <help>Converts the given String to a date.</help>
    <sample>// Converts the given String to a date Value.
      //
      // Usage:
      // str2date(var);
      // 1: String - The Variable with the String to convert.
      // This call uses your localized format.
      //
      // str2date(var, var);
      // 1: String - The Variable with the String to convert.
      // 2: String - The Format:
      // yy / yyyy - 06 / 2006
      // MM / MMM / MMMMM - 11 / Nov / November
      // d / dd - 1 / 01
      // E / EEEE - Tue / Tuesday
      // hh / HH - 11 / 23
      // m / mm - 5 / 05
      // s / ss - 8 / 08
      //
      // str2date(var, var, var);
      // 1: String - The Variable with the String to convert.
      // 2: String - The Format:
      // 3: String - The Locale Parameter
      // An valid ISO Language Code. (DE = German, EN = English, FR = France, ...)
      //
      // str2date(var, var, var, var);
      // 1: String - The Variable with the String to convert.
      // 2: String - The Format:
      // 3: String - The Locale Parameter
      // An valid ISO Language Code. (DE = German, EN = English, FR = France, ...)
      // 4: String - The Timezone Parameter.
      // A valid timezone: EST, GMT, ... (if invalid GMT will be selected as default)
      //
      // 2006-11-15
      //
      Alert(str2date("01.12.2006","dd.MM.yyyy"));
      Alert(str2date("01.12.2006 23:23:01","dd.MM.yyyy HH:mm:ss"));
      Alert(str2date("Tue.May.2006","E.MMM.yyyy","EN"));
      Alert(str2date("22.02.2008 23:23:01","dd.MM.yyyy HH:mm:ss","DE"));
      Alert(str2date("22.02.2008 23:23:01","dd.MM.yyyy HH:mm:ss","DE", "EST"));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var,var</argument>
      <argument id="3">var,var,var</argument>
      <argument id="4">var,var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="date2str">
    <help>Converts the given String to a date.</help>
    <sample>// Converts the given Date to a string Value.
      //
      // Usage:
      // date2str(var);
      // 1: Date - The Variable with the Date to convert.
      // This call uses your localized format.
      //
      // date2str(var, var);
      // 1: Date - The Variable with the Date to convert.
      // 2: String - The Format:
      // yy / yyyy - 06 / 2006
      // MM / MMM / MMMMM - 11 / Nov / November
      // d / dd - 1 / 01
      // E / EEEE - Tue / Tuesday
      // hh / HH - 11 / 23
      // m / mm - 5 / 05
      // s / ss - 8 / 08
      //
      // date2str(var, var, var);
      // 1: Date - The Variable with the Date to convert.
      // 2: String - The Format:
      // 3: String - The Locale Parameter
      // A valid ISO Language Code. (DE = German, EN = English, FR = France, ...)
      //
      // date2str(var, var, var, var);
      // 1: Date - The Variable with the Date to convert.
      // 2: String - The Format:
      // 3: String - The Locale Parameter
      // A valid ISO Language Code. (DE = German, EN = English, FR = France, ...)
      // 4: String - The Timezone Parameter.
      // A valid timezone: EST, GMT, ... (if invalid GMT will be selected as default)
      //
      // 2006-11-15
      //
      var dValue = new Date();
      Alert(date2str(dValue));
      Alert(date2str(dValue,"dd.MM.yyyy"));
      Alert(date2str(dValue,"dd.MM.yyyy HH:mm:ss"));
      Alert(date2str(dValue,"E.MMM.yyyy","DE"));
      Alert(date2str(dValue,"dd.MM.yyyy HH:mm:ss","EN"));
      Alert(date2str(dValue,"dd.MM.yyyy HH:mm:ss","EN", "EST"));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var,var</argument>
      <argument id="3">var,var,var</argument>
      <argument id="4">var,var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="isDate">
    <help>Check if the given Value is a valid date.</help>
    <sample>// Returns true, if the given value is a valid date.
      //
      // Usage:
      // isDate(var);
      // 1: var - The Variable to check.
      //
      // 2006-11-15
      //
      var d1 = "Hello World";
      var d2 = new Date();
      Alert(isDate(d1));
      Alert(isDate(d2));
    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="replace">
    <help>Searches inside the given String(arg1) for the matching one(arg2) and repalces it with arg3.</help>
    <sample>// Replaces Strings inside the given Variable.
      // It is possible to make more replacements inside
      // one call. The given variables must be an odd number
      //
      // Usage:
      // replace(var, var, var);
      // 1: String - The Variable with the content to replace.
      // 2: String - The Value to search for.
      // 3: String - The Value to replace with.
      //
      // replace(var, var, var, var,var,...)
      // 1: String - The Variable with the content to replace.
      // 2: String - The First Value to search for.
      // 3: String - The First Value to replace with.
      // 4: String - The Second Value to search for.
      // 5: String - The Second Value to replace with.
      // ...
      //
      // 2006-11-15
      //
      var str1 = "Hello World, this is a nice function";
      var str2 = replace(str1,"World", "Folk");
      Alert(str2);
      var str2 = replace(str1,"World", "Folk", "nice","beautifull");
      Alert(str2);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="decode">
    <help>Looks inside arg1 for arg2 if matches, the function returns arg3.</help>
    <sample>// Decode has the functonality like the IF-THEN-ELSE statement.
      // Decode searches for the first matching criteria and returns
      // the given value back. If no criteria could be found, decode
      // returns the default Value or the given String.
      //
      // Usage:
      // decode(var, var, var);
      // 1: String - The Variable with the content for matching.
      // 2: String - The Value to search for.
      // 3: String - The Return Value.
      // If no entriy found, decode returns the Search for Parameter
      //
      // decode(var, var, var, var,var,...)
      // 1: String - The Variable with the content to matching.
      // 2: String - The First Value to search for.
      // 3: String - The First Return Value with.
      // 4: String - The Second Value to search for.
      // 5: String - The Second Return Value with.
      // ...
      //
      // 2006-11-15
      //
      var str1 = "Hallo";
      Alert(decode(str1, "Hallo", "Hello"));
      Alert(decode(str1, "1", "Mr", "2", "Mrs", "N/A"));
      Alert(decode(str1, "1", "Mr", "2", "Mrs"));
      str1 = "Mrs";
      Alert(decode(str1, "1", "Mr", "2", "Mrs"));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="upper">
    <help>Turns the given string to upper case.</help>
    <sample>// Converts the given String to upper case
      //
      // Usage:
      // upper(var);
      //
      // 2006-11-15
      //
      var str1= "Hello World!";
      var str2= upper(str1);
      Alert("Input:" + str1);
      Alert("Converted to UpperCase:" + str2);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="lower">
    <help>Turns the given string to lower case.</help>
    <sample>// Converts the given String to lower case
      //
      // Usage:
      // lower(var);
      //
      // 2006-11-15
      //
      var str1= "Hello World!";
      var str2= lower(str1);
      Alert("Input:" + str1);
      Alert("Converted to LowerCase:" + str2);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="str2num">
    <help>Turns the given string to Numeric</help>
    <sample>// Converts the given String to a numeric Value.
      //
      // Usage:
      // str2num(var);
      // 1: String - The Variable with the String to convert.
      //
      // str2num(var, var);
      // 1: String - The Variable with the String to convert.
      // 2: String - The Format:
      //
      // 2006-11-15
      //
      var str1 = "1.234,56";
      var str2 = "12";
      Alert((str2num(str1,"#,##0.00")));
      Alert((str2num(str2)));
    </sample>
    <type>1</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="num2str">
    <help>Format the given Numeric into a String.</help>
    <sample>// Converts a numeric Value to a String with the
      // given format.
      //
      // Usage:
      // num2str(var);
      // 1. String - The String to convert.
      // The converstation uses the standard localized format.
      //
      // num2str(var,var);
      // 1. String - The String to convert.
      // 2. String - The Format
      //
      // num2str(var,var,var);
      // 1. String - The String to convert.
      // 2. String - The Format
      // 3: String - The Locale Parameter
      // An valid ISO Language Code. (DE = German, EN = English, FR = France, ...)
      //
      // 2006-11-15
      //
      var d1 = 123.40;
      var d2 = -123.40;
      Alert(num2str(d1));
      Alert(num2str(d1, "0.00"));
      Alert(num2str(d1, "0.00", "EN"));
      Alert(num2str(d2, "0.00;(0.00)", "EN"));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var,var</argument>
      <argument id="3">var,var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="Alert">
    <help>Creates a Message box, with the given String</help>
    <sample>// Sends a MessageBox, with the given Text to the Screen.
      // This function has the same behavior as the Alert Function
      // in your Browser.
      //
      // Usage:
      // Alert(var);
      //
      // 2006-11-15
      //
      Alert("Hello World!");
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="LoadScriptFile">
    <help>Loads a *.js file for further use.</help>
    <sample>// Load's a JavaScript File into your actual running Context.
      // This function should called from your defined StartScript
      // otherwise your JavaScript-File is loaded on each processing
      // Row.
      //
      // Usage:
      // LoadScriptFile(var);
      //
      // 2006-11-15
      //
      var xPfad = "Your Filename, with Path";
      LoadScriptFile(xPfad);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="LoadScriptFromTab">
    <help>Adds the content of a JavaScript_mod Tab into the current Context.</help>
    <sample>// Load's JavaScript Functions from an existing tab
      // into your actual running Context.
      // This function should called from your defined StartScript
      // otherwise your functions are loaded on each processing
      // Row.
      //
      // Usage:
      // LoadScriptFromTab(var);
      //
      // 2006-11-15
      //
      var xTab = "Your TabName";
      LoadScriptFromTab(xTab);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="print">
    <help>Prints a string to stdout</help>
    <sample>// Prints a String to stdout without any CR or LF.
      // Usefull for debuging.
      //
      // Usage:
      // print(var);
      // 1: String - The String to print.
      //
      // 2006-11-15
      //
      var str = "Hello World!";
      print(str);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="println">
    <help>Prints the given String to stdout.</help>
    <sample>// Prints a String as complete Line to stdout (with CR/LF).
      // Usefull for debuging.
      //
      // Usage:
      // println(var);
      // 1: String - The String to print.
      //
      // 2006-11-15
      //
      var str = "Hello World!";
      println(str);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="resolveIP">
    <help>Returns the DNS Name of the given IP.</help>
    <sample>// Resolves the DNS-Name of the given IP
      //
      // Usage:
      // resolveIP(var, var);
      // 1: String - The String with the IP
      // 2: String - Either "IP" or "NAME"
      //
      // 2006-11-15
      //
      var ip1 = "The IP to resolve.";

      //
      // When the second argument is "IP", the return code will be the hostname
      // of ip1 (when its name can be resolved). If the second argument
      // is anything else then "IP" (e.g. "NAME") a hostname in ip1 will be
      // converted to a numeric IP address (x.x.x.x) that is returned as String.
      //
      // resolveIP("127.0.0.1", "IP"); will on most systems return "localhost".
      // resolveIP("localhost", "NAME"); will on most systems return "127.0.0.1".
      //
      Alert(resolveIP(ip1, "IP"));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="year">
    <help>Returns the Year of an valid date.</help>
    <sample>// Returns the year of a given date value.
      //
      // Usage:
      // year(var);
      // 1: Date - The Variable with the Date.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(year(d1));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="str2RegExp">
    <help>Returns an Array with the splited String.</help>
    <sample>// Split's a String with a Regular Expression to an Array.
      //
      // Usage:
      // replace(var, var, var);
      // 1: String - The Variable with the Content
      // 2: String - The Regular Expression to apply
      //
      // 2006-11-15
      //
      var strToMatch = "info@proconis.de";
      var strReg = "^(\\w+)@([a-zA-Z_]+?)\\.([a-zA-Z]{2,3})$";
      var xArr = str2RegExp(strToMatch, strReg);
      if ( xArr != null ) {
      for(i=0;i&lt;xArr.length;i++) {
      Alert(xArr[i]);
      }
      }
      else {
      Alert("no match");
      }
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="setEnvironmentVar">
    <help>Sets the System Variable to the given Value.</help>
    <sample>// Set a Value as Hop System Variable
      //
      // Usage:
      // setEnvironmentVar(var,var);
      // 1: String - The name of the Variable to set.
      // 2: Variable - The Value which should be assigned
      //
      // 2006-11-15
      //
      var strVarName="setEnvTest";
      var strVarValue="123456";
      Alert(getEnvironmentVar(strVarName));
      setEnvironmentVar(strVarName,strVarValue);
      Alert(getEnvironmentVar(strVarName));
      strVarValue="654321";
      setEnvironmentVar(strVarName,strVarValue);
      Alert(getEnvironmentVar(strVarName));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="getEnvironmentVar">
    <help>Returns Value of the given System Variable.</help>
    <sample>// Retrieves the Value of a given Hop System Variable
      //
      // Usage:
      // getEnvironmentVar(var);
      // 1: String - The name of the Variable to retrieve.
      //
      // 2006-11-15
      //
      Alert(getEnvironmentVar("user.dir"));
      Alert(getEnvironmentVar("user.name"));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="touch">
    <help>Creates a new file.</help>
    <sample>// Creates an empty File with the actual datetime.
      // If the File exists, the actual datetime would be
      // applied.
      //
      // Usage:
      // touch(var);
      //
      // 2006-11-15
      //

      var strFile = "Your File, with Path.";
      touch(strFile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="isRegExp">
    <help>Check if the RegularExpression Matche</help>
    <sample>// Checks, if the Regular Expression matches the given String.
      // It is possible to make more Checks inside
      // one call. For this purpose, the function is not a real logic
      // funtcion. It returns the offset of the matching Regular Expression.
      // If no match, -1 is returned.
      //
      // Usage:
      // isRegExp(var, var);
      // 1: String - The Variable with the content to Check.
      // 2: String - The Regular Expression to check.
      //
      // isRegExp(var, var, var,...)
      // 1: String - The Variable with the content to Check.
      // 2: String - The first Regular Expression to check.
      // 3: String - The second Regular Expression to check.
      // ...
      //
      // 2006-11-15
      //

      var email1 ="info@proconis.de";
      var email2= "support@proconis.co.uk";
      var email3= "HelloWorld@x";

      var reg1="^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$";
      var reg2="^[\\w-\.]+@([\\w-]+\\.)+[\\w-]{2,4}$";

      Alert(isRegExp(email1, reg1,reg2) + " Matches");
      Alert(isRegExp(email2, reg1,reg2) + " Matches");
      Alert(isRegExp(email3, reg1,reg2) + " Matches");
    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="fileExists">
    <help>Checks if a file Exists</help>
    <sample>// Checks the existens of a File.
      //
      // Usage:
      // fileExists(var);
      // 1: String - The Filename with Path.
      //
      // 2006-11-15
      //

      var strFile = "Your File, with Path.";
      Alert(fileExists(strFile));
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="week">
    <help>Returns the week of an year based on an valid date.</help>
    <sample>// Returns the week of a given date value.
      //
      // Usage:
      // week(var);
      // 1: Date - The Variable with the Date.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(week(d1));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="month">
    <help>Returns the month of an valid date.</help>
    <sample>// Returns the month of a given date value.
      //
      // Usage:
      // month(var);
      // 1: Date - The Variable with the Date.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(month(d1));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="quarter">
    <help>Returns the quarter of an valid date.</help>
    <sample>// Returns the quarter of a given date value.
      //
      // Usage:
      // quarter(var);
      // 1: Date - The Variable with the Date.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(quarter(d1));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="rpad">
    <help>Pads a string Value with a given String, n-times. From the right size.</help>
    <sample>// Padds the string to the right with the given character for the specified length
      //
      // Usage:
      // rpad(var,var,var);
      // 1. String - The String to Pad
      // 2. Char - The Char to Pad
      // 3. Number - The Length for the padding
      //
      // 2006-11-15
      //
      var str1= "Hello World!";
      Alert("Input:" + str1);
      Alert("Rpad:" + rpad(str1, "x",20));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="lpad">
    <help>Pads a string Value with a given String, n-times. From the left size.</help>
    <sample>// Padds the string to the left with the given character for the specified length
      //
      // Usage:
      // lpad(var,var,var);
      // 1. String - The String to Pad
      // 2. Char - The Char to Pad
      // 3. Number - The Length for the padding
      //
      // 2006-11-15
      //
      var str1= "Hello World!";
      Alert("Input:" + str1);
      Alert("Lpad:" + lpad(str1, "x",20));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="ltrim">
    <help>Removes spaces from the left side.</help>
    <sample>// Removes blanks and whitespace of the given String
      // from the left side.
      //
      // Usage:
      // ltrim(var);
      //
      // 2006-11-15
      //
      var str1= "Hello World! ";
      Alert("Input:" + str1);
      Alert("Ltrim:" + ltrim(str1));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="rtrim">
    <help>Removes spaces from the right side.</help>
    <sample>// Removes blanks and whitespace of the given String
      // from the right side.
      //
      // Usage:
      // rtrim(var);
      //
      // 2006-11-15
      //
      var str1= " Hello World! ";
      Alert("Input:" + str1);
      Alert("Rtrim:" + rtrim(str1));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="isCodepage">
    <help>Checks a string Value, against the given CodePage.</help>
    <sample>// Checks, a String value against a given Codepage
      //
      // Usage:
      // isCodepage(var,var);
      // 1: String - The String which should be checked
      // 2: String - The String with the Name of the Codepage
      //
      var xStr = "Réal";
      Alert(isCodepage(xStr, "UTF-8"));
      Alert(isCodepage(xStr, "windows-1250"));
    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="fillString">
    <help>Creates a string Value with the given char.</help>
    <sample>// Constructs a String with of the defined length
      // with the given Char.
      //
      // Usage:
      // fillString(var,var);
      // 1: Char - The Char which should be used.
      // 2: Number - The Size of the new String.
      //
      Alert(fillString("x",10));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="dateAdd">
    <help>Adds a Number of the defined Type to the Date.</help>
    <sample>// Add's the given number to the given date Value.
      //
      // Usage:
      // dateAdd(var,var,var);
      // 1: Date - The Variable with the Date.
      // 2: String - The Type which represents the value
      // to add.
      // y - Years
      // m - Months
      // d - Days
      // w - Weeks
      // wd - Workingdays
      // hh - Hours
      // mi - Minutes
      // ss - Seconds
      // 3: Numeric - The Value to add.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(dateAdd(d1, "y", 1));
      Alert(dateAdd(d1, "m", 4));
      Alert(dateAdd(d1, "d", 5));
      Alert(dateAdd(d1, "wd", 5));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="dateDiff">
    <help>Builds the difference of the requested type from two dates</help>
    <sample>// Returns the difference, of a given type, between
      // two dates.
      //
      // Usage:
      // dateDiff(var,var,var);
      // 1: Date - The Variable with the Startdate.
      // 2: Date - The Variable with the Endate.
      // 3: String - The Type which represents the
      // the return value.
      // y - Years
      // m - Months
      // d - Days
      // w - Weeks
      // wd - Workingdays
      // hh - Hours
      // mi - Minutes
      // ss - Seconds
      //
      // 2006-11-15
      //
      var d1 = new Date();
      var d2 = dateAdd(d1,"y",1);
      Alert(dateDiff(d1,d2,"y"));
      Alert(dateDiff(d1,d2,"m"));
      Alert(dateDiff(d1,d2,"d"));
      Alert(dateDiff(d1,d2,"wd"));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="getNextWorkingDay">
    <help>Gets the next working Day from a given Date.</help>
    <sample>// Returns the next working day, based of the given date.
      //
      // Usage:
      // getNextWorkingDay(var);
      // 1: Date - The Variable with the Date.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(getNextWorkingDay(d1));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="fireToDB">
    <help>Sends a SQL-Statement to a valid DB-Connection.</help>
    <sample>// Fires a SQL-Statement to a valid Hop connection
      // and returns, if possible, an array.
      // This should only be used for SELECT statements.
      //
      // Usage:
      // fireToDB(var,var);
      // 1: String - The Name of the Connection.
      // 2: String - The SQL to send.
      //
      // 2006-11-15
      //
      var strConn = "MY Connection";
      var strSQL = "SELECT COUNT(*) FROM ...";
      var xArr = fireToDB(strConn, strSQL);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="isWorkingDay">
    <help>Checks, if the given Date is not a Saturday or Sunday.</help>
    <sample>// Returns true, if the given date is a working day
      //
      // Usage:
      // isWorkingDay(var);
      // 1: Date - The Variable with the Date.
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(isWorkingDay(d1));
    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="getDayNumber">
    <help>Returns the number of the Day by a given Type.</help>
    <sample>// Returns the number of a date, inside the
      // given type.
      //
      // Usage:
      // getDayNumber(var,var);
      // 1: Date - The Variable with the Date.
      // 2: String - The Type:
      // y - Day in Year
      // m - Day in Month
      // w - Day in Week
      // wm - Day of Week in Month
      //
      // 2006-11-15
      //
      var d1 = new Date();
      Alert(getDayNumber(d1, "y"));
      Alert(getDayNumber(d1, "m"));
      Alert(getDayNumber(d1, "w"));
      Alert(getDayNumber(d1, "wm"));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="abs">
    <help>abs</help>
    <sample>// Returns the absolute value of a given numeric.
      //
      // Usage:
      // abs(var);
      // 1: Numeric - The Variable with the Numeric
      //
      // 2006-11-15
      //
      var d1 = -1234.01;
      var d2 = 1234.01;
      Alert(abs(d1));
      Alert(abs(d2));
    </sample>
    <type>1</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="floor">
    <help>floor</help>
    <sample>// Returns the largest numeric value, of the given value.
      // The Value would be rounded.
      //
      // Usage:
      // floor(var);
      // 1: Numeric - The Variable with the Numeric
      //
      // 2006-11-15
      //
      var d1 = -1234.01;
      var d2 = 1234.01;
      Alert(floor(d1));
      Alert(floor(d2));
    </sample>
    <type>1</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="ceil">
    <help>ceil</help>
    <sample>// Returns the smallest double value.
      // The Value would be rounded.
      //
      // Usage:
      // ceil(var);
      // 1: Numeric - The Variable with the Numeric
      //
      // 2006-11-15
      //
      var d1 = -1234.01;
      var d2 = 1234.01;
      Alert(ceil(d1));
      Alert(ceil(d2));
    </sample>
    <type>1</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="getProcessCount">
    <help>Returns the number of processed rows by a given Type.</help>
    <sample>// Returns a number with the current processed Rows.
      // The type is changable.
      //
      // Usage:
      // getProcessCount(var);
      // 1: String - The Hop Type:
      // u - Lines Update
      // i - Lines Insert
      // w - Lines Write
      // r - Lines Read
      // o - Lines Output
      //
      // 2006-11-15
      //
      Alert(getProcessCount("u"));
      Alert(getProcessCount("r"));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="getFiscalDate">
    <help>Calculates the Fiscal Date for a given Date and Offset.</help>
    <sample>// Returns the fiscal Date from the date value,
      // based on a given offset.
      //
      // Usage:
      // getFiscalDate(var);
      // 1: Date - The Variable with the Date.
      // 2: String - The Date/Month which represents
      // the fiscal Start Offset. Format allways "dd.MM.".
      //
      // 2006-11-15
      //
      var d1 = new Date();
      var str1 = "01.07.";
      var str2 = "10.12.";
      Alert(getFiscalDate(d1, str1));
      Alert(getFiscalDate(d1, str2));
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="writeToLog">
    <help>Write a String to the defined Hop Log.</help>
    <sample>// Writes a string to the defined Hop Log.
      //
      // Usage:
      // writeToLog(var);
      // 1: String - The Message which should be written to
      // the Hop Debug Log
      //
      // writeToLog(var,var);
      // 1: String - The Type of the Log
      // d - Debug
      // l - Detailed
      // e - Error
      // m - Minimal
      // r - RowLevel
      //
      // 2: String - The Message which should be written to
      // the Hop Log
      //
      // 2006-11-21
      //
      writeToLog("Hello World!");
      writeToLog("r", "Hello World!");
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="getPipelineName">
    <help>Returns the name of this pipeline.</help>
    <sample>// Returns the name of this pipeline.
      //
      // Usage:
      // getPipelineName();
      //
      // 2006-12-04
      //
      var xPipelineName = getPipelineName();
      Alert(xPipelineName);
    </sample>
    <type>4</type>
    <Arguments>
    </Arguments>
  </jsFunction>

  <jsFunction name="appendToFile">
    <help>Adds Data to a File</help>
    <sample>// Appends data to the given file.
      // If the file doesnt exists, it would be
      // created.
      //
      // Usage:
      // appendToFile(var,var);
      // 1: String - The Filename with Path.
      // 2: String - The content to put.
      //
      // 2006-12-04
      //
      var strFile = "Your File, with Path.";
      var strContent = "Hello World!";
      appendToFile(strFile, strContent);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>

  </jsFunction>

  <jsFunction name="trim">
    <help>Removed leading and trailing white space characters, such as spaces and tabs, from a string.</help>
    <sample>// Trims the given string
      //
      // Usage:
      // trim(var);
      //
      // 2007-01-25
      //
      var str1= " Hello World! ";
      var str2= trim(str1);
      Alert("Input:" + str1);
      Alert("Trimmed input:" + str2);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="substr">
    <help>Gets part of a string, a sub-string.</help>
    <sample>// Perform the substring function
      //
      // Usage:
      // substr(var, from);
      // substr(var, from, to);
      //
      // 2007-01-25
      //
      var str1= "Hello Hop!";
      var str2= substr(str1, 6);
      var str3= substr(str1, 6, 7);
      Alert("Input : " + str1);
      Alert("From position 6: " + str2);
      Alert("From position 6 for 7 long : " + str3);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var</argument>
      <argument id="2">var,var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="setVariable">
    <help>Sets the PDI Variable to the given value.</help>
    <sample>// Set a Value as Hop variable
      //
      // Usage:
      // setVariable(var,var,var);
      // 1: String - The name of the variable to set.
      // 2: Variable - The value which should be assigned
      // 3: Type - "s"ystem, "r"oot, "p"arent, "g"randparent. Upto which
      // level the variable is set.
      //
      // 2007-07-27
      //
      var strVarName="setEnvTest";
      var strVarValue="123456";
      Alert(getVariable(strVarName, ""));
      setVariable(strVarName,strVarValue, "r");
      Alert(getVariable(strVarName, ""));
      strVarValue="654321";
      setVariable(strVarName,strVarValue, "r");
      Alert(getVariable(strVarName, ""));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="getVariable">
    <help>Returns Value of the given PDI variable or the default.</help>
    <sample>// Retrieves the value of a given Hop Variable
      //
      // Usage:
      // getVariable(var, var);
      // 1: String - The name of the variable to retrieve.
      // 2: String - The default if the variable doesn't exist.
      //
      // 2007-07-27
      //
      var strVarName="getVariableTest";
      var strVarValue="123456";
      Alert(getVariable(strVarName, ""));
      setVariable(strVarName,strVarValue, "r");
      Alert(getVariable(strVarName, ""));
      strVarValue="654321";
      setVariable(strVarName,strVarValue, "r");
      Alert(getVariable(strVarName, ""));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="LuhnCheck">
    <help>Check if the given Value is a valid Card Number using the Luhn algorithm.</help>
    <sample>// Returns true, if the given value is a valid card number
      //
      // Usage:
      // LuhnCheck(var);
      // 1: var - The Variable to check.
      //
      // 2007-09-11
      //
      var str1 = "4444333322221111";
      Alert(str1 + ": " + LuhnCheck(str1));

      var str2 = "4444333322221110";
      Alert(str2 + ": " + LuhnCheck(str2));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="getDigitsOnly">
    <help>Get only digit from a String.</help>
    <sample>// Returns String that contain digit value
      //
      // Usage:
      // getDigitsOnly(var);
      // 1: var - The Variable to check.
      //
      // 2007-09-11
      //
      var str1 = "abc123cde";
      Alert(getDigitsOnly(str1));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="LuhnCheck">
    <help>Check if the given Value is a valid Card Number using the Luhn algorithm.</help>
    <sample>// Returns true, if the given value is a valid card number
      //
      // Usage:
      // LuhnCheck(var);
      // 1: var - The Variable to check.
      //
      // 2007-09-11
      //
      var str1 = "4444333322221111";
      Alert(str1 + ": " + LuhnCheck(str1));

      var str2 = "4444333322221110";
      Alert(str2 + ": " + LuhnCheck(str2));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="indexOf">
    <help>Returns the index of a substring within a string of the first occurrence of the specified substring.</help>
    <sample>// Perform the indexOf function
      //
      // Usage:
      // indexOf(string, substring);
      // indexOf(string, substring, fromIndex);
      //
      // 2007-09-25
      //
      var str1= "Hello Hop!";
      var str2= indexOf(str1, "Hop");
      var str3= indexOf(str1, "o", 3);
      Alert("Input : " + str1);
      Alert("Index of 'Hop' : " + str2);
      Alert("index of 'o', search from position 7 : " + str3);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var,var</argument>
      <argument id="2">var,var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="deleteFile">
    <help>Delete a file</help>
    <sample>// Delete a file.
      //
      // Usage:
      // deleteFile(var);
      // 1: String - The Filename with Path.
      // 2007-10-29
      //

      var strFile = "Your File, with Path.";
      deleteFile(strFile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="createFolder">
    <help>Create a folder</help>
    <sample>// Create a folder.
      //
      // Usage:
      // createFolder(var);
      // 1: String - The Foldername with Path.
      // 2007-10-29
      //

      var strFolder = "Your Folder, with Path.";
      createFolder(strFolder);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="copyFile">
    <help>copyFile a file</help>
    <sample>// copyFile a file.
      //
      // Usage:
      // copyFile(var1,var2,var3);
      // 1: String - The file to copy with Path.
      // 2: String - The destination filename with Path.
      // 3: Boolean- Overwrite destination file if exist.
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      var destinationfile="your destination filename with path";
      copyFile(sourcefile,destinationfile,false);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="getFileSize">
    <help>get size of a file (in bytes)</help>
    <sample>// get file size.
      //
      // Usage:
      // getFileSize(var1);
      // 1: String - The file to get the size from.
      // The result is a long (in bytes)
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      getFileSize(sourcefile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="isFile">
    <help>check if it's a file</help>
    <sample>
      //
      // Usage:
      // isFile(var1);
      // 1: String - The file to check
      // The result is a boolean (true or false)
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      isFile(sourcefile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="isFolder">
    <help>check if it's a folder</help>
    <sample>
      //
      // Usage:
      // isFolder(var1);
      // 1: String - The folder to check
      // The result is a boolean (true or false)
      // 2007-10-29
      //
      var sourcefile="your source foldername with path";
      isFolder(sourcefile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="getShortFilename">
    <help>return the file short filename</help>
    <sample>
      //
      // Usage:
      // getShortFilename(var1);
      // 1: String - The file
      // The result is a String
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      getShortFilename(sourcefile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="getFileExtension">
    <help>return the file extension</help>
    <sample>
      //
      // Usage:
      // getFileExtension(var1);
      // 1: String - The file
      // The result is a String
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      getFileExtension(sourcefile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="getParentFoldername">
    <help>return the file parent folder</help>
    <sample>
      //
      // Usage:
      // getParentFoldername(var1);
      // 1: String - The file
      // The result is a String
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      getParentFoldername(sourcefile);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="getLastModifiedTime">
    <help>return the file last modified time</help>
    <sample>
      //
      // Usage:
      // getLastModifiedTime(var1);
      // 1: String - The file
      // The result is a String
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      var dateformat="yyyy-MM-dd HH:MM:ss";
      getLastModifiedTime(sourcefile,dateformat);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>


  <jsFunction name="trunc">
    <help>truncates numbers or dates</help>
    <sample>
      //
      // Usage:
      // trunc(var1);
      // trunc(var1, var2);
      //
      // 1: date or double - the value to be truncated
      //
      // 2008-02-29
      //
      trunc(1234.9); // gives back 1234
    </sample>
    <type>1</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="truncDate">
    <help>truncates a date to a certain precision</help>
    <sample>
      //
      // Usage:
      // truncDate(var1, var2);
      //
      // 1: a date - the date-time to be truncated
      // 2: the requested precision:
      // - 5 : truncate MONTHS (set to 1)
      // - 4 : truncate DAYS (set to 1)
      // - 3 : truncate HOURS (set to 0)
      // - 2 : truncate MINUTES (set to 0)
      // - 1 : truncate SECONDS (set to 0)
      // - 0 : truncate MILLISECONDS (set to 0)
      //
      // 2008-02-29
      //
      var dateTime = new Date();
      var date0 = truncDate(dateTime, 0); // gives back today at yyyy/MM/dd HH:mm:ss.000
      var date1 = truncDate(dateTime, 1); // gives back today at yyyy/MM/dd HH:mm:00.000
      var date2 = truncDate(dateTime, 2); // gives back today at yyyy/MM/dd HH:00:00.000
      var date3 = truncDate(dateTime, 3); // gives back today at yyyy/MM/dd 00:00:00.000
      var date4 = truncDate(dateTime, 4); // gives back today at yyyy/MM/01 00:00:00.000
      var date5 = truncDate(dateTime, 5); // gives back today at yyyy/01/01 00:00:00.000
    </sample>
    <type>2</type>
    <Arguments>
      <argument id="1">var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="moveFile">
    <help>moveFile a file</help>
    <sample>// moveFile a file.
      //
      // Usage:
      // moveFile(var1,var2,var3);
      // 1: String - The file to move with Path.
      // 2: String - The destination filename with Path.
      // 3: Boolean- Overwrite destination file if exists.
      // 2007-10-29
      //
      var sourcefile="your source filename with path";
      var destinationfile="your destination filename with path";
      moveFile(sourcefile,destinationfile,false);
    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var,var,var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="execProcess">
    <help>Execute an external processus</help>
    <sample>// Execute a processus.
      //
      // Usage:
      //execProcess(processus);
      // 1: String - The external processus to execute.
      // Return - type : String containing the response
      // 02/05/2008
      var processus="The processus to execute";
      execProcess(processus);
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="isEmpty">
    <help>Check if the given String is empty.</help>
    <sample>// Returns true, if the given String is empty.
      //
      // Usage:
      // isEmpty(var);
      // 1: var - The String to check.
      //
      // 2008-05-06
      //
      var d = "Hello World";
      Alert(isEmpty(d));
    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="isMailValid">
    <help>Check if the given email is valid.</help>
    <sample>// Returns true, if the given email is valid.
      //
      // Usage:
      // isMailValid(var);
      // 1: var - The email to check.
      //
      // 2008-05-20
      //

    </sample>
    <type>3</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="escapeXml">
    <help>Mask XML content</help>
    <sample>// Returns masked content
      //
      // Usage:
      // escapeXml(var);
      // 1: var - The XML content to mask
      //
      // 2008-10-07
      //
      var str1 = "value" ;
      Alert(escapeXml(str1));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="removeDigits">
    <help>Remove digits from from a String.</help>
    <sample>/
      //
      // Usage:
      // removeDigits(var);
      // 1: var - The Variable to check.
      //
      // 2007-09-11
      //
      var str1 = "abc123cde";
      Alert(getDigitsOnly(str1));
    </sample>
    <type>4</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="initCap">
    <help>Sets the first character of each word in upper-case.</help>
    <sample>// Returns String
      //
      // Usage:
      // initCap(var);
      // 1: var - The Variable to process.
      //
      // 2007-09-11
      //
      var str1 = "my home";
      Alert(initCap(str1));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="protectXmlCdata">
    <help>Protect XML with CDATA.</help>
    <sample>// Returns protected String
      //
      // Usage:
      // protectXmlCdata(var);
      // 1: var - The Variable to protect.
      //
      // 2007-09-11
      //
      var str1 = "my home";
      Alert(protectXmlCdata(str1));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="unEscapeXml">
    <help>Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes</help>
    <sample>// Returns unescaped String
      //
      // Usage:
      // unEscapeXml(var);
      // 1: var - The Variable to unescape.
      //
      // 2007-09-11
      //
      var str1 = "my home";
      Alert(unEscapeXml(str1));
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="escapeSql">
    <help>Escapes the characters in a String to be suitable to pass to an SQL query</help>
    <sample>// Returns escaped String
      //
      // Usage:
      // "escapeSql"(var);
      // 1: var - The Variable to escape.
      //
      // 2007-09-11
      //
      var str1 = "SELECT * FROM CUSTOMER WHERE NAME='" + escapeSql("McHale's Navy") + "'";
      //At present, this method only turns single-quotes into doubled single-quotes
      // ("McHale's Navy" => "McHale''s Navy"
      Alert(str1);
    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="escapeHtml">
    <help>Escapes a string containing entity escapes to a string containing the actual
      Unicode characters corresponding to the escapes. Supports HTML 4.0 entities
    </help>
    <sample>// Returns escaped String
      //
      // Usage:
      // "escapeHtml"(var);
      // 1: var - The Variable to escape.
      //
      // 2007-09-11
      //

    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="unEscapeHtml">
    <help>Unescapes a string containing entity escapes to a string containing the actual
      Unicode characters corresponding to the escapes. Supports HTML 4.0 entities
    </help>
    <sample>// Returns escaped String
      //
      // Usage:
      // "unEscapeHtml"(var);
      // 1: var - The Variable to escape.
      //
      // 2007-09-11
      //

    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
  <jsFunction name="loadFileContent">
    <help>Load the content of a file</help>
    <sample>// Returns file content
      //
      // Usage:
      // "loadFileContent";
      // 1: loadFileContent(filename) - Load file content from a full path
      // 2: loadFileContent(filename, encoding) - Load file content from a full path
      // 2007-09-11
      //

    </sample>
    <type>5</type>
    <Arguments>
      <argument id="1">var</argument>
      <argument id="2">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="getOcuranceString">
    <help>Get the number of ocurances of searchFor in string.</help>
    <sample>// Return number of ocurances
      //
      // Usage:
      // getOcuranceString(string, searchFor)
      // string is the string to be searched
      // searchFor is the string to be counted
      // 2007-09-11
      //

    </sample>
    <type>0</type>
    <Arguments>
      <argument id="2">var,var</argument>
    </Arguments>
  </jsFunction>

  <jsFunction name="removeCRLF">
    <help>Remove CR / LF from String</help>
    <sample>// Return cleaned string
      //
      // Usage:
      // removeCRLF(string)
      // string is the string from which CR end LF will be removed
      // 2007-09-11
      //

    </sample>
    <type>0</type>
    <Arguments>
      <argument id="1">var</argument>
    </Arguments>
  </jsFunction>
</jsFunctions>


