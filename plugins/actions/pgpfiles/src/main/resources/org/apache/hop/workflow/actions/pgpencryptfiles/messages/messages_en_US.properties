#
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

ActionPGPEncryptFiles.ActionsType.Encrypt.Label=Encrypt
ActionPGPEncryptFiles.ActionsType.Sign.Label=Sign
ActionPGPEncryptFiles.ActionsType.SignAndEncrypt.Label=Sign and encrypt
ActionPGPEncryptFiles.AddDate.Label=Add date to filename
ActionPGPEncryptFiles.AddDate.Tooltip=Add date to filename
ActionPGPEncryptFiles.AddDateBeforeExtension.Label=Add date before extension
ActionPGPEncryptFiles.AddDateBeforeExtension.Tooltip=If you select this option, Apache Hop will add date (and time) before file extension.\nThe extension will be considered starting from the last ''.'' found.
ActionPGPEncryptFiles.AddFileToResult.Label=Add files to result files name
ActionPGPEncryptFiles.AddFileToResult.Tooltip=Add destination files to result files name.\nIt is helpful if you want to attach theses files to an email thanks to send mail action.
ActionPGPEncryptFiles.AddMovedDate.Label=Add date
ActionPGPEncryptFiles.AddMovedDate.Tooltip=Add date
ActionPGPEncryptFiles.AddMovedDateBeforeExtension.Label=Add date before extension
ActionPGPEncryptFiles.AddMovedDateBeforeExtension.Tooltip=Add date before extension
ActionPGPEncryptFiles.AddMovedTime.Label=Add time
ActionPGPEncryptFiles.AddMovedTime.Tooltip=Add time
ActionPGPEncryptFiles.AddTime.Label=Add time to filename
ActionPGPEncryptFiles.AddTime.Tooltip=Add time to filename
ActionPGPEncryptFiles.asciiMode.Label=Use ASCII mode
ActionPGPEncryptFiles.asciiMode.Tooltip=Use ASCII mode otherwise the file will be created in binary.
ActionPGPEncryptFiles.BrowseFiles.Label=File...
ActionPGPEncryptFiles.BrowseFolders.Label=Folder...
ActionPGPEncryptFiles.CreateDestinationFolder.Label=Create destination folder
ActionPGPEncryptFiles.CreateDestinationFolder.Tooltip=Create destination folder if necessary.\nIf destination is a file, parent folder will be created if necessary.
ActionPGPEncryptFiles.CreateMoveToFolder.Label=Create folder
ActionPGPEncryptFiles.CreateMoveToFolder.Tooltip=Create folder if necessary
ActionPGPEncryptFiles.DateTimeFormat.Label=Date time format
ActionPGPEncryptFiles.Delete_Source_File_IfFileExists.Label=Delete source file
ActionPGPEncryptFiles.Description=Encrypt files with PGP (Pretty Good Privacy).\nThis action need GnuPG to work properly.
ActionPGPEncryptFiles.DestinationFileFolder.Label=File/Folder destination
ActionPGPEncryptFiles.DestinationFileFolder.Tooltip=Enter here the destination folder to hit.\n If you selected file as source,you can define a file as destination.
ActionPGPEncryptFiles.DestinationFileTab.Label=Destination file
ActionPGPEncryptFiles.DestinationFolder.Label=Destination folder
ActionPGPEncryptFiles.DestinationIsAFile.Label=Destination is a file
ActionPGPEncryptFiles.DestinationIsAFile.Tooltip=Apache Hop will consider that destination is a file.
ActionPGPEncryptFiles.Do_Nothing_IfFileExists.Label=Do nothing
ActionPGPEncryptFiles.Do_Nothing_IfMovedFileExists.Label=Do nothing
ActionPGPEncryptFiles.DoNotKeepFolderStructure.Label=Do not keep folder structure
ActionPGPEncryptFiles.DoNotKeepFolderStructure.Tooltip=Check this option if you want to decrypt and create files in\n destination file without keeping folders structure.
ActionPGPEncryptFiles.Error=Error encrypting file\! {0}
ActionPGPEncryptFiles.Error.AddingToFilenameResult=Error adding filename [{0}] to result filesname. Exception \: {1}
ActionPGPEncryptFiles.Error.DestinationFolderNotFound=Destination folder does not exist\!
ActionPGPEncryptFiles.Error.Exception.MoveProcess=Can not move file/folder [{0}] to [{1}]. Exception \: [{2}]
ActionPGPEncryptFiles.Error.Exception.MoveProcessError=There was an error encrypting file [{0}] to [{1}] \: [{2}]
ActionPGPEncryptFiles.Error.Exception.UnableLoadXML=Unable to load action of type ''PGPEncryptFiles'' from XML node
ActionPGPEncryptFiles.Error.GettingFilename=Error getting filename for file [{0}]. Exception \: {1}
ActionPGPEncryptFiles.Error.SourceFileNotExists=File/folder [{0}] does not exist\!
ActionPGPEncryptFiles.Error.SuccessConditionbroken=Success condition was broken. We have {0} error(s)
ActionPGPEncryptFiles.Fail_IfFileExists.Label=Fail
ActionPGPEncryptFiles.Fail_IfMovedFileExists.Label=Fail
ActionPGPEncryptFiles.Fields.Action.Label=Action
ActionPGPEncryptFiles.Fields.DestinationFileFolder.Label=File/Folder destination
ActionPGPEncryptFiles.Fields.DestinationFileFolder.Tooltip=Enter here the destination folder to hit.\n If you selected file as source,you can define a file as destination.
ActionPGPEncryptFiles.Fields.Label=Files/Folders\: 
ActionPGPEncryptFiles.Fields.SourceFileFolder.Label=File/Folder source
ActionPGPEncryptFiles.Fields.SourceFileFolder.Tooltip=Enter here the file or folder to move\n If it's a folder, Apache Hop will fetch only if ''Include subfolders'' is checked\!
ActionPGPEncryptFiles.Fields.UserID.Label=User ID
ActionPGPEncryptFiles.Fields.UserID.Tooltip=Name of the key
ActionPGPEncryptFiles.Fields.Wildcard.Label=Wildcard
ActionPGPEncryptFiles.Fields.Wildcard.Tooltip=Specify here the wildcard to match.\n Only files that match the wildcard will be moved.
ActionPGPEncryptFiles.FilenameAdd.Button=&Add
ActionPGPEncryptFiles.FilenameDelete.Button=&Delete
ActionPGPEncryptFiles.FilenameDelete.Tooltip=Remove selected files from the grid
ActionPGPEncryptFiles.FilenameEdit.Button=&Edit
ActionPGPEncryptFiles.FilenameEdit.Tooltip=Edit selected files
ActionPGPEncryptFiles.FileResult.Group.Label=Result files name
ActionPGPEncryptFiles.Filetype.All=All files
ActionPGPEncryptFiles.GpgExe.Label=GPG location
ActionPGPEncryptFiles.GpgExe.Tooltip=Specify gpg location
ActionPGPEncryptFiles.GroupDestinationFile.Label=Destination file
ActionPGPEncryptFiles.GroupMoveToGroup.Label=Move to folder
ActionPGPEncryptFiles.IfFileExists.Label=If destination file exists 
ActionPGPEncryptFiles.IfMovedFileExists.Label=If file exists in destination folder 
ActionPGPEncryptFiles.IncludeSubfolders.Label=Include Subfolders
ActionPGPEncryptFiles.IncludeSubfolders.Tooltip=Check this if you want to fetch also sub folders\nThis option will work only when the source is a folder.
ActionPGPEncryptFiles.keyword=PGP,encrypt.files
ActionPGPEncryptFiles.Log.ArgFromPrevious.Found=found [{0}] argument(s) from previous result
ActionPGPEncryptFiles.Log.CanNotCreateParentFolder=Could not create parent folder {0}\!
ActionPGPEncryptFiles.Log.CanNotMoveFolderToFile=Can not decrypt folder content [{0}] to file [{1}]
ActionPGPEncryptFiles.Log.Error=Error while processing \: {0}
ActionPGPEncryptFiles.Log.Error.FolderMissing=We can not find Folder [{0}] \!
ActionPGPEncryptFiles.Log.Error.GettingMoveToFolder=We can not get file object for folder [{0}]. Exception \: [{1}]
ActionPGPEncryptFiles.Log.Error.MoveToFolderMissing=The move to folder is missing
ActionPGPEncryptFiles.Log.Error.NotFolder=[{0}] is not a folder \!
ActionPGPEncryptFiles.Log.FetchFolder=Fetching folder [{0}]
ActionPGPEncryptFiles.Log.FileAddedToResultFilesName=File [{0}] was added to result filenames
ActionPGPEncryptFiles.Log.FileDeleted=Source file [{0}] was deleted
ActionPGPEncryptFiles.Log.FileEncrypted=File [{0}] was decrypted to [{1}] 
ActionPGPEncryptFiles.Log.FileExists=File [{0}] exists\!
ActionPGPEncryptFiles.Log.FileOverwrite=File [{0}] was overwritten
ActionPGPEncryptFiles.Log.FolderNotExist=Folder {0} does not exist \!
ActionPGPEncryptFiles.Log.FolderWasCreated=Parent folder {0} was created.
ActionPGPEncryptFiles.Log.Forbidden=FORBIDDEN
ActionPGPEncryptFiles.Log.IgnoringRow=Ignoring row with source or destination is NULL. Source File/folder source \: [{0}], destination file/folder \: [{1}], wilcard \: [{2}]
ActionPGPEncryptFiles.Log.IncludeSubFoldersOn=Sub folders will be fetched ...
ActionPGPEncryptFiles.Log.Info.FilesInError=Total files in error \: {0}
ActionPGPEncryptFiles.Log.Info.FilesInSuccess=Total files successfully processed \: {0}
ActionPGPEncryptFiles.Log.ProcessingRow=Processing row source File/folder source \: [{0}] ... destination file/folder \: [{1}]... wildcard \: [{2}]
ActionPGPEncryptFiles.Move_To_Folder_IfFileExists.Label=Move source file to folder
ActionPGPEncryptFiles.MovedDateTimeFormat.Label=Date format
ActionPGPEncryptFiles.Name=Encrypt files with PGP
ActionPGPEncryptFiles.Name.Default=Move files
ActionPGPEncryptFiles.Name.Label=Action name\: 
ActionPGPEncryptFiles.NrErrorsLessThan.Label=Nr errors lesser than
ActionPGPEncryptFiles.NrErrorsLessThan.Tooltip=Success when Number of errors is lesser than
ActionPGPEncryptFiles.Overwrite_File_IfFileExists.Label=Overwrite destination file
ActionPGPEncryptFiles.Overwrite_Filename_IffMovedFileExists.Label=Overwrite file
ActionPGPEncryptFiles.Previous.Label=Copy previous results to args
ActionPGPEncryptFiles.Previous.Tooltip=Check this to pass the results of the previous entry to the arguments of this entry.\nBe careful, arguments must be in the same order that arguments\!\n ie \:\n(1) action type (encrypt, sign, sign and encrypt)\n(2) source folder/file\n(3) wildcard\n(4) User ID\n(5) destination folder/file
ActionPGPEncryptFiles.Settings.Label=Settings
ActionPGPEncryptFiles.SourceFileFolder.Label=File/Folder source
ActionPGPEncryptFiles.SourceFileFolder.Tooltip=Enter here the file or folder to move\n If it's a folder, check ''Include subfolders'' option if necessary\!
ActionPGPEncryptFiles.SpecifyFormat.Label=Specify Date time format
ActionPGPEncryptFiles.SpecifyFormat.Tooltip=Specify Date time format
ActionPGPEncryptFiles.SpecifyMoveFormat.Label=Specify format
ActionPGPEncryptFiles.SpecifyMoveFormat.Tooltip=Specify format
ActionPGPEncryptFiles.SuccessCondition.Label=Success condition 
ActionPGPEncryptFiles.SuccessOn.Group.Label=Success On
ActionPGPEncryptFiles.SuccessWhenAllWorksFine.Label=Success when all works fine
ActionPGPEncryptFiles.SuccessWhenAtLeat.Label=Success when at least x files decrypted
ActionPGPEncryptFiles.SuccessWhenErrorsLessThan.Label=Success when number of errors lesser than 
ActionPGPEncryptFiles.Tab.Advanced.Label=Advanced
ActionPGPEncryptFiles.Tab.General.Label=General
ActionPGPEncryptFiles.Title=Encrypt files with PGP
ActionPGPEncryptFiles.Unique_Name_IfFileExists.Label=Create file with unique name
ActionPGPEncryptFiles.UniqueName_IfMovedFileExists.Label=Unique name
ActionPGPEncryptFiles.Wildcard.Label=Wildcard
ActionPGPEncryptFiles.Wildcard.Tooltip=Specify here the wildcard to match.\n Only files that match the wildcard will be moved.
GPG.DeletingTempFile=Deleting GPG temporary file [{0}] ...
GPG.ErrorCheckingGPGFile=Error cheking PGP file
GPG.ErrorCreatingTempFile=Cannot create GPG temporary file\!
GPG.ErrorWritingTempFile=Cannot write GPG temporary file\! 
GPG.Exception.ExistStatus=Error running command\: {0}
GPG.ExceptionillegalThreadStateException=Illegal Thread State Exception
GPG.ExceptionWait=Exception at waitfor\!
GPG.ExceptionWrite=Exception at write\!
GPG.GPGFilenameMissing=GPG filename is missing\!
GPG.GPGFilenameNotFound=We can not find GPG file [{0}]\!
GPG.GPGNotAFile=[{0}] is not a valid GPG file\! Please provid a filename.
GPG.IOException=IO exception while writing running command\!
GPG.RunningCommand=Running GPG command [{0}] ...
GPG.TempFileCreated=Temporary GPG file [{0}] was created.
